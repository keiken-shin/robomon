{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Header.js","components/ErrorBoundary.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","props","id","name","username","email","phone","className","src","alt","CardList","robots","map","robot","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Header","onSearchChange","ErrorBoundary","state","hasError","error","info","this","setState","children","Component","App","useState","robomon","setRobomon","searchField","setSearchField","useEffect","axios","get","then","res","data","catch","err","console","log","filterRobots","filter","toLowerCase","includes","length","event","target","value","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"+MAmBeA,EAjBF,SAACC,GAAW,IAEdC,EAAoCD,EAApCC,GAAIC,EAAgCF,EAAhCE,KAAMC,EAA0BH,EAA1BG,SAAUC,EAAgBJ,EAAhBI,MAAOC,EAASL,EAATK,MAElC,OACI,yBAAKC,UAAU,yHACX,yBAAKA,UAAU,6EAA6EC,IAAG,+BAA0BN,GAAMO,IAAI,YACnI,yBAAKF,UAAU,4BACX,wBAAIA,UAAU,WAAWJ,GACzB,yBAAKI,UAAU,mBAAmBH,GAClC,yBAAKG,UAAU,iBAAiBF,GAChC,yBAAKE,UAAU,iBAAiBD,MCWjCI,EArBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAEhB,OACI,6BAASJ,UAAU,6CAEXI,EAAOC,KAAI,SAACC,GAAW,IACXX,EAAoCW,EAApCX,GAAIC,EAAgCU,EAAhCV,KAAMC,EAA0BS,EAA1BT,SAAUC,EAAgBQ,EAAhBR,MAAOC,EAASO,EAATP,MACnC,OAAO,kBAAC,EAAD,CACHQ,IAAKZ,EACLA,GAAIA,EACJC,KAAMA,EACNC,SAAUA,EACVC,MAAOA,EACPC,MAAOA,SCDhBS,EAbG,SAAC,GAAkC,EAAhCC,YAAiC,IAApBC,EAAmB,EAAnBA,aAC9B,OACI,6BACI,2BACIV,UAAU,2EACVW,KAAK,SACLC,YAAY,YACZC,SAAUH,MCGXI,EATA,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,eACd,OACI,4BAAQf,UAAU,0CACd,wBAAIA,UAAU,6BAAd,YACA,kBAAC,EAAD,CAAWU,aAAcK,M,gCCkBtBC,E,kDAtBX,WAAYtB,GAAO,IAAD,8BACd,cAAMA,IAEDuB,MAAQ,CACTC,UAAU,GAJA,E,8DAQAC,EAAOC,GACrBC,KAAKC,SAAS,CAAEJ,UAAU,M,+BAI1B,OAAGG,KAAKJ,MAAMC,SAEN,0DAGDG,KAAK3B,MAAM6B,a,GAnBEC,a,iBC2CbC,EAvCH,WAAO,IAAD,EACgBC,mBAAS,IADzB,mBACRC,EADQ,KACCC,EADD,OAEwBF,mBAAS,IAFjC,mBAERG,EAFQ,KAEKC,EAFL,KAIhBC,qBAAU,WACRC,IACGC,IAAI,8CACJC,MAAK,SAAAC,GACJ,IAAM/B,EAAS+B,EAAIC,KACnBR,EAAWxB,MAEZiC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,QAC3B,IAEH,IAIMG,EAAed,EAAQe,QAAO,SAAApC,GAClC,OAAOA,EAAMV,KAAK+C,cAAcC,SAASf,EAAYc,kBAGvD,OAAQhB,EAAQkB,OAQZ,yBAAK7C,UAAU,uCACb,kBAAC,EAAD,CAAQe,eAjBS,SAAC+B,GACtBhB,EAAegB,EAAMC,OAAOC,UAiBxB,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAU5C,OAASqC,MATvB,yBAAKzC,UAAU,wEACb,wBAAIA,UAAU,sBAAd,gB,MCnBYiD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3B,MAAK,SAAA4B,GACJA,EAAaC,gBAEd1B,OAAM,SAAAlB,GACLoB,QAAQpB,MAAMA,EAAM6C,c","file":"static/js/main.8f161de5.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = (props) => {\r\n\r\n    const {id, name, username, email, phone} = props;\r\n\r\n    return(\r\n        <div className=\"md:flex bg-gray-800 rounded-lg p-6 transition duration-300 ease-in-out transform hover:-translate-y-2 hover:scale-100\">\r\n            <img className=\"bg-gray-700 h-16 w-16 md:h-24 md:w-24 rounded-full mx-auto md:mx-0 md:mr-6\" src={`https://robohash.org/${id}`} alt=\"robomon\"/>\r\n            <div className=\"text-center md:text-left\">\r\n                <h2 className=\"text-lg\">{name}</h2>\r\n                <div className=\"text-purple-500\">{username}</div>\r\n                <div className=\"text-gray-600\">{email}</div>\r\n                <div className=\"text-gray-600\">{phone}</div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n\r\n    return(\r\n        <section className=\"grid grid-cols-1 gap-5 p-6 md:grid-cols-4\">\r\n            {\r\n                robots.map((robot) => {\r\n                    const { id, name, username, email, phone} = robot;\r\n                    return <Card \r\n                        key={id} \r\n                        id={id} \r\n                        name={name} \r\n                        username={username} \r\n                        email={email} \r\n                        phone={phone}\r\n                        />\r\n                })\r\n            }\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) => {\r\n    return(\r\n        <div>\r\n            <input \r\n                className=\"px-3 h-full bg-transparent border border-purple-600 rounded outline-none\" \r\n                type=\"search\" \r\n                placeholder=\"Search...\" \r\n                onChange={searchChange}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\nimport SearchBox from './SearchBox';\r\n\r\nconst Header = ({ onSearchChange }) => {\r\n    return(\r\n        <header className=\"bg-gray-900 sticky top-0 p-6 flex z-10\">\r\n            <h1 className=\"font-bold text-2xl flex-1\">Robomon.</h1>\r\n            <SearchBox searchChange={onSearchChange} />\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        this.setState({ hasError: true });\r\n    }\r\n\r\n    render() {\r\n        if(this.state.hasError){\r\n            return(\r\n                <h1>Oops! Something went wrong</h1>\r\n            )\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import React, { useState, useEffect } from 'react';\nimport CardList from '../components/CardList';\nimport Header from '../components/Header';\nimport ErrorBoundary from '../components/ErrorBoundary';\nimport axios from 'axios';\n\nconst App = () => {\n  const [ robomon, setRobomon ] = useState([]);\n  const [ searchField, setSearchField ] = useState('');\n  \n  useEffect(() => {\n    axios\n      .get('https://jsonplaceholder.typicode.com/users')\n      .then(res =>{\n        const robots = res.data;\n        setRobomon(robots)\n      })\n      .catch(err => console.log(err))\n  }, []);\n\n  const onSearchChange = (event) => {\n    setSearchField(event.target.value);\n  }\n\n  const filterRobots = robomon.filter(robot => {\n    return robot.name.toLowerCase().includes(searchField.toLowerCase());\n  });\n\n  return !robomon.length ?\n    (\n      <div className=\"bg-gray-900 min-h-screen text-white flex items-center justify-center\">\n        <h1 className=\"text-3xl font-bold\">Loading...</h1>\n      </div>\n    )\n    :\n    (\n      <div className=\"bg-gray-900 min-h-screen text-white\">\n        <Header onSearchChange={onSearchChange} />\n        <ErrorBoundary>\n          <CardList robots={ filterRobots }/>\n        </ErrorBoundary>\n      </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './containers/App';\nimport './assets/main.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}